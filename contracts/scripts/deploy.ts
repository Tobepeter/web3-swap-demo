import fs from 'fs'
import { ethers, network, run } from 'hardhat'
import path from 'path'
import prettier from 'prettier'
import { MockERC20, MockUSDC, MockUniswapV2Pair } from '../typechain-types'

// TODO: 有空看看 import 的方式获取路径，不然这里重构调整下位置会有问题
// TODO: 换个名字，AddressConfig.ts
const tsConfigPath = path.join(__dirname, '../../src/address-config.ts')

/**
 * 部署 MockERC20 合约
 */
async function deployMockERC20() {
  console.log('部署 MockERC20 合约...')
  const MockERC20 = await ethers.getContractFactory('MockERC20')
  const mockERC20 = await MockERC20.deploy()
  await mockERC20.waitForDeployment()
  console.log('MockERC20 合约部署完成！')
  return mockERC20
}

/**
 * 部署 MockUSDC 合约
 */
async function deployMockUSDC() {
  console.log('部署 MockUSDC 合约...')
  const MockUSDC = await ethers.getContractFactory('MockUSDC')
  const mockUSDC = await MockUSDC.deploy()
  await mockUSDC.waitForDeployment()
  console.log('MockUSDC 合约部署完成！')
  return mockUSDC
}

/**
 * 部署 MockUniswapV2Pair 合约
 */
async function deployMockUniswapV2Pair(mockERC20: MockERC20, mockUSDC: MockUSDC) {
  console.log('部署 MockUniswapV2Pair 合约...')
  const MockUniswapV2Pair = await ethers.getContractFactory('MockUniswapV2Pair')
  const mockUniswapV2Pair = await MockUniswapV2Pair.deploy(await mockERC20.getAddress(), await mockUSDC.getAddress())
  await mockUniswapV2Pair.waitForDeployment()
  console.log('MockUniswapV2Pair 合约部署完成！')
  return mockUniswapV2Pair
}

/**
 * 添加初始流动性
 */
async function addInitialLiquidity(mockERC20: MockERC20, mockUSDC: MockUSDC, mockUniswapV2Pair: MockUniswapV2Pair) {
  console.log('\n添加初始流动性...')

  // TODO: 地址有重复调用，可以缓存下俩

  // 授权 Pair 合约使用代币
  await mockERC20.approve(await mockUniswapV2Pair.getAddress(), ethers.MaxUint256)
  await mockUSDC.approve(await mockUniswapV2Pair.getAddress(), ethers.MaxUint256)

  // 添加初始流动性
  const amount0 = ethers.parseEther('1000')
  const amount1 = ethers.parseUnits('1000', 6)

  await mockUniswapV2Pair.addLiquidity(amount0, amount1)

  // TODO: 有时间这些信息下载为log文件放本地

  console.log('初始流动性添加完成！')
  console.log('-------------------')
  console.log('初始流动性数量：')
  console.log(`Mock_ERC20: ${ethers.formatEther(amount0)}`)
  console.log(`Mock_USDC: ${ethers.formatUnits(amount1, 6)}`)
  console.log('-------------------')
}

/**
 * 写入合约地址
 */
async function writeContractAddresses(mockERC20Address: string, mockUSDCAddress: string, mockUniswapV2PairAddress: string) {
  // TODO: 有条件可以针对不同的network，目前都是 sepolia
  const writeData = `
  /**
   * 合约地址配置
   * @generated by hardhat（DO NOT MODIFY!!!）
   */
   export const addressConfig = {
     mockERC20: '${mockERC20Address}',
     mockUSDC: '${mockUSDCAddress}',
     mockUniswapV2Pair: '${mockUniswapV2PairAddress}',
   }
  `

  try {
    console.log('格式化合约地址配置...')
    const formattedCode = await prettier.format(writeData, {
      parser: 'typescript',
      semi: false,
      singleQuote: true,
      trailingComma: 'es5',
    })

    console.log('写入合约地址配置...')
    fs.writeFileSync(tsConfigPath, formattedCode)
    console.log(`\n合约地址已写入: ${tsConfigPath}`)
  } catch (error) {
    console.error('写入失败，写入原始内容:', error)
    fs.writeFileSync(tsConfigPath, writeData)
    console.log(`\n合约地址已写入(未格式化): ${tsConfigPath}`)
  }
}

async function main() {
  console.log('开始部署合约...')
  console.log(`当前网络: ${network.name}`)

  // 部署 MockERC20
  const mockERC20 = await deployMockERC20()

  // 部署 MockUSDC
  const mockUSDC = await deployMockUSDC()

  // 部署 MockUniswapV2Pair
  const mockUniswapV2Pair = await deployMockUniswapV2Pair(mockERC20, mockUSDC)

  // 获取合约地址
  const mockERC20Address = await mockERC20.getAddress()
  const mockUSDCAddress = await mockUSDC.getAddress()
  const mockUniswapV2PairAddress = await mockUniswapV2Pair.getAddress()

  console.log('\n合约部署完成！')
  console.log('-------------------')
  console.log('部署地址汇总：')
  console.log(`MockERC20: ${mockERC20Address}`)
  console.log(`MockUSDC: ${mockUSDCAddress}`)
  console.log(`MockUniswapV2Pair: ${mockUniswapV2PairAddress}`)

  // 写入合约地址
  await writeContractAddresses(mockERC20Address, mockUSDCAddress, mockUniswapV2PairAddress)

  // 添加初始流动性
  await addInitialLiquidity(mockERC20, mockUSDC, mockUniswapV2Pair)

  // 只在非本地网络（如 sepolia）上等待确认和验证合约
  // if (network.name !== 'hardhat' && network.name !== 'localhost') {
  //   // 等待区块确认
  //   console.log('\n等待区块确认...')
  //   await mockERC20.deploymentTransaction()?.wait(5)
  //   await mockUSDC.deploymentTransaction()?.wait(5)
  //   await mockUniswapV2Pair.deploymentTransaction()?.wait(5)

  //   // 验证合约

  //   // TODO: 下面的代码是AI生成的，目前有error
  //   // 合约验证失败: NetworkRequestError: A network request failed. This is an error from the block explorer, not Hardhat. Error: read ECONNRESET

  //   console.log('\n开始验证合约...')
  //   try {
  //     await run('verify:verify', {
  //       address: await mockERC20.getAddress(),
  //       constructorArguments: [],
  //     })

  //     await run('verify:verify', {
  //       address: await mockUSDC.getAddress(),
  //       constructorArguments: [],
  //     })

  //     await run('verify:verify', {
  //       address: await mockUniswapV2Pair.getAddress(),
  //       constructorArguments: [await mockERC20.getAddress(), await mockUSDC.getAddress()],
  //     })

  //     console.log('合约验证完成！')
  //   } catch (error) {
  //     console.error('合约验证失败:', error)
  //   }
  // }
}

main()
